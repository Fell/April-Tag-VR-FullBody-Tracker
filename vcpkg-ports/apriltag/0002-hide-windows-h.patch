diff --git a/common/pthreads_cross.cpp b/common/pthreads_cross.cpp
index d4a2786..05cd949 100644
--- a/common/pthreads_cross.cpp
+++ b/common/pthreads_cross.cpp
@@ -23,6 +23,10 @@ SOFTWARE.
 #include "common/pthreads_cross.h"
 #include <time.h>
 
+#ifdef _WIN32
+#include <windows.h>
+#endif
+
 #ifdef _WIN32
 
 typedef struct {
@@ -71,8 +75,8 @@ int pthread_mutex_init(pthread_mutex_t *mutex, pthread_mutexattr_t *attr)
 
     if (mutex == NULL)
         return 1;
-
-    InitializeCriticalSection(mutex);
+    mutex->impl = malloc(sizeof(CRITICAL_SECTION));
+    InitializeCriticalSection((LPCRITICAL_SECTION)mutex->impl);
     return 0;
 }
 
@@ -80,7 +84,8 @@ int pthread_mutex_destroy(pthread_mutex_t *mutex)
 {
     if (mutex == NULL)
         return 1;
-    DeleteCriticalSection(mutex);
+    DeleteCriticalSection((LPCRITICAL_SECTION)mutex->impl);
+    free(mutex->impl);
     return 0;
 }
 
@@ -88,7 +93,7 @@ int pthread_mutex_lock(pthread_mutex_t *mutex)
 {
     if (mutex == NULL)
         return 1;
-    EnterCriticalSection(mutex);
+    EnterCriticalSection((LPCRITICAL_SECTION)mutex->impl);
     return 0;
 }
 
@@ -96,7 +101,7 @@ int pthread_mutex_unlock(pthread_mutex_t *mutex)
 {
     if (mutex == NULL)
         return 1;
-    LeaveCriticalSection(mutex);
+    LeaveCriticalSection((LPCRITICAL_SECTION)mutex->impl);
     return 0;
 }
 
@@ -105,7 +110,8 @@ int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *attr)
     (void)attr;
     if (cond == NULL)
         return 1;
-    InitializeConditionVariable(cond);
+    cond->impl = malloc(sizeof(CONDITION_VARIABLE));
+    InitializeConditionVariable((PCONDITION_VARIABLE)cond->impl);
     return 0;
 }
 
@@ -113,6 +119,7 @@ int pthread_cond_destroy(pthread_cond_t *cond)
 {
     /* Windows does not have a destroy for conditionals */
     (void)cond;
+    free(cond->impl);
     return 0;
 }
 
@@ -128,7 +135,7 @@ int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex,
 {
     if (cond == NULL || mutex == NULL)
         return 1;
-    if (!SleepConditionVariableCS(cond, mutex, timespec_to_ms(abstime)))
+    if (!SleepConditionVariableCS((PCONDITION_VARIABLE)cond->impl, (LPCRITICAL_SECTION)mutex->impl, timespec_to_ms(abstime)))
         return 1;
     return 0;
 }
@@ -137,7 +144,7 @@ int pthread_cond_signal(pthread_cond_t *cond)
 {
     if (cond == NULL)
         return 1;
-    WakeConditionVariable(cond);
+    WakeConditionVariable((PCONDITION_VARIABLE)cond->impl);
     return 0;
 }
 
@@ -145,7 +152,7 @@ int pthread_cond_broadcast(pthread_cond_t *cond)
 {
     if (cond == NULL)
         return 1;
-    WakeAllConditionVariable(cond);
+    WakeAllConditionVariable((PCONDITION_VARIABLE)cond->impl);
     return 0;
 }
 
diff --git a/common/pthreads_cross.h b/common/pthreads_cross.h
index 897a333..000d849 100644
--- a/common/pthreads_cross.h
+++ b/common/pthreads_cross.h
@@ -25,7 +25,6 @@ SOFTWARE.
 
 #ifdef _WIN32
 #include <stdbool.h>
-#include <windows.h>
 #else
 #include <pthread.h>
 #include <sched.h>
@@ -33,17 +32,24 @@ SOFTWARE.
 
 #ifdef _WIN32
 
-typedef CRITICAL_SECTION pthread_mutex_t;
 typedef void pthread_mutexattr_t;
 typedef void pthread_attr_t;
 typedef void pthread_condattr_t;
 typedef void pthread_rwlockattr_t;
-typedef HANDLE pthread_t;
-typedef CONDITION_VARIABLE pthread_cond_t;
+typedef void* pthread_t;
 
 #ifdef __cplusplus
 extern "C" {
 #endif
+typedef struct pthread_mutex {
+    void* /* CRITICAL_SECTION */ impl;
+} pthread_mutex_t;
+typedef struct pthread_cond {
+    void* /* CONDITION_VARIABLE */ impl;
+} pthread_cond_t;
+
+struct timespec;
+
 int pthread_create(pthread_t *thread, pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
 int pthread_join(pthread_t thread, void **value_ptr);
 int pthread_detach(pthread_t);
diff --git a/common/time_util.c b/common/time_util.c
index 7a25f42..596344b 100644
--- a/common/time_util.c
+++ b/common/time_util.c
@@ -29,12 +29,27 @@ either expressed or implied, of the Regents of The University of Michigan.
 #include <math.h>
 #include "time_util.h"
 
+#ifdef _WIN32
+#include <windows.h>
+#endif
+
 struct timeutil_rest
 {
     int64_t acc_time;
     int64_t start_time;
 };
 
+#ifdef _MSC_VER
+static int gettimeofday(struct timeval* tp, void* tzp)
+{
+  unsigned long t;
+  t = time(NULL);
+  tp->tv_sec = t / 1000;
+  tp->tv_usec = t % 1000;
+  return 0;
+}
+#endif
+
 timeutil_rest_t *timeutil_rest_create()
 {
     timeutil_rest_t *rest = calloc(1, sizeof(timeutil_rest_t));
diff --git a/common/time_util.h b/common/time_util.h
index 207e958..5451f14 100644
--- a/common/time_util.h
+++ b/common/time_util.h
@@ -32,21 +32,12 @@ either expressed or implied, of the Regents of The University of Michigan.
 #include <time.h>
 
 #ifdef _WIN32
-#include <windows.h>
 typedef long long suseconds_t;
+struct timeval;
+struct timespec;
 #endif
 
-#ifdef _MSC_VER
-
-inline int gettimeofday(struct timeval* tp, void* tzp)
-{
-  unsigned long t;
-  t = time(NULL);
-  tp->tv_sec = t / 1000;
-  tp->tv_usec = t % 1000;
-  return 0;
-}
-#else
+#ifndef _MSC_VER
 #include <sys/time.h>
 #include <unistd.h>
 #endif
